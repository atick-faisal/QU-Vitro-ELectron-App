const text = document.getElementById("text");

const connectButton = document.getElementById("connect");
const sendButton = document.getElementById("upload");
const ctx = document.getElementById("chart");
const flowPicker = document.getElementById("flow-picker");

const connectionSwitch = document.getElementById("connection-switch");
const connectionStatus = document.getElementById("connection-status");
const flowPeriodInput = document.getElementById("flow-period");

const nFLowPoints = 50;

const AORTA_ROOT = [
    55, 57, 59, 63, 67, 72, 79, 86, 94, 104, 114, 126, 137, 149, 160, 171, 180, 189, 197, 204, 210, 215, 220, 224, 228, 231, 234, 237, 240, 242, 244, 246, 248, 250, 251, 253, 254, 254, 255, 255, 255, 255, 254, 254, 253, 252, 251, 250, 249, 247, 245, 243, 241, 238, 236, 233, 231, 228, 226, 223, 221, 218, 216, 213, 211, 207, 203, 199, 194, 190, 185, 181, 177, 172, 167, 163, 158, 154, 150, 146, 142, 138, 135, 131, 128, 125, 122, 118, 114, 109, 105, 100, 96, 92, 88, 81, 73, 62, 51, 42, 36, 34, 35, 39, 44, 48, 51, 53, 53, 54, 54, 54, 55, 55, 54, 54, 54, 54, 54, 55, 55, 55, 54, 54, 54, 54, 54, 55, 55, 55, 54, 54, 54, 54, 55, 55, 55, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55
]

const ANTERIOR_TIBIAL = [
    101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 102, 102, 102, 102, 102, 102, 102, 101, 101, 101, 101, 101, 101, 100, 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 100, 103, 107, 112, 119, 127, 137, 149, 161, 173, 184, 194, 203, 211, 218, 224, 229, 233, 237, 241, 245, 247, 250, 251, 253, 254, 255, 255, 255, 255, 254, 253, 252, 251, 250, 248, 247, 245, 243, 242, 240, 238, 236, 234, 231, 229, 227, 224, 222, 220, 217, 215, 212, 209, 207, 204, 201, 197, 193, 189, 185, 181, 176, 172, 168, 163, 159, 154, 150, 146, 141, 137, 133, 129, 125, 122, 118, 114, 111, 108, 106, 103, 101, 99, 96, 93, 91, 89, 87, 86, 84, 81, 78, 74, 70, 65, 60, 57, 54, 54, 56, 60, 65, 69, 72, 74, 76, 78, 80, 81, 83, 84, 86, 88, 91, 93, 96, 98, 101, 102, 104, 106, 108, 110, 111, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 124, 125, 126, 126, 127, 127, 128, 129, 129, 130, 131, 131, 131, 131, 131, 131, 131, 131, 130, 130, 129, 129, 128, 128, 127, 127, 126, 125, 124, 124, 123, 122, 121, 119, 118, 117, 116, 115, 114, 113, 112, 111, 111, 110, 109, 109, 108, 107, 107, 106, 106, 105, 104, 104, 103, 103, 103, 102, 102, 101, 101, 100, 100, 100, 99, 99, 99, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 100, 100, 100, 100, 101
]

const ASCENDING_AORTA = [
    59, 59, 59, 61, 63, 66, 70, 75, 81, 89, 97, 107, 118, 130, 142, 154, 165, 176, 185, 193, 201, 207, 212, 216, 220, 223, 226, 229, 232, 236, 239, 242, 244, 247, 249, 251, 252, 254, 254, 255, 255, 255, 254, 254, 253, 252, 251, 249, 248, 247, 245, 244, 242, 240, 238, 235, 233, 231, 229, 227, 225, 223, 222, 220, 218, 217, 214, 211, 208, 204, 199, 194, 190, 186, 181, 177, 172, 168, 163, 159, 155, 152, 148, 143, 139, 135, 131, 127, 123, 119, 114, 109, 104, 99, 95, 91, 87, 81, 73, 64, 53, 43, 35, 32, 32, 36, 42, 48, 54, 58, 60, 61, 60, 59, 56, 54, 52, 50, 50, 50, 51, 53, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 55, 55, 55, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 60, 60, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64, 63, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59
]

const BIFURCATION = [
    78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 76, 78, 82, 86, 92, 99, 108, 119, 131, 144, 157, 168, 179, 189, 198, 206, 213, 219, 224, 230, 235, 239, 243, 246, 249, 251, 252, 254, 255, 255, 255, 254, 254, 252, 251, 250, 248, 246, 244, 241, 239, 236, 234, 231, 228, 225, 221, 218, 215, 211, 208, 204, 201, 197, 193, 189, 185, 180, 176, 171, 165, 160, 154, 148, 142, 137, 131, 126, 120, 114, 109, 103, 98, 93, 88, 83, 78, 74, 69, 65, 62, 58, 55, 52, 49, 46, 43, 40, 38, 36, 34, 32, 29, 25, 20, 15, 10, 5, 2, 0, 1, 5, 9, 14, 18, 21, 24, 26, 28, 30, 33, 35, 37, 40, 43, 46, 50, 53, 57, 60, 62, 65, 68, 70, 73, 75, 77, 79, 82, 84, 86, 88, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 105, 106, 106, 106, 106, 106, 106, 106, 105, 105, 104, 104, 103, 102, 102, 101, 100, 99, 98, 97, 96, 95, 94, 92, 91, 89, 88, 87, 86, 85, 83, 82, 82, 81, 80, 79, 78, 77, 77, 76, 75, 74, 74, 73, 73, 72, 71, 71, 70, 70, 69, 69, 69, 68, 68, 68, 67, 67, 67, 67, 67, 67, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 68, 68, 68, 69, 69, 70, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78
]

const BRACHIAL = [
    85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 87, 90, 94, 98, 104, 111, 119, 128, 139, 151, 163, 175, 185, 195, 203, 210, 216, 222, 226, 229, 233, 236, 238, 242, 245, 248, 250, 252, 254, 254, 255, 255, 254, 253, 252, 250, 247, 245, 243, 240, 238, 235, 233, 231, 229, 227, 224, 222, 219, 216, 213, 210, 207, 204, 202, 199, 196, 194, 192, 189, 187, 184, 181, 178, 174, 170, 166, 162, 159, 157, 154, 150, 147, 144, 141, 138, 135, 131, 128, 125, 122, 119, 117, 116, 114, 112, 110, 107, 105, 103, 101, 100, 99, 96, 91, 84, 77, 70, 66, 64, 66, 72, 79, 86, 92, 96, 98, 100, 100, 101, 100, 100, 99, 99, 99, 100, 103, 105, 108, 110, 112, 113, 114, 115, 116, 116, 116, 115, 115, 114, 113, 113, 112, 112, 112, 112, 112, 112, 112, 111, 111, 110, 109, 109, 108, 108, 107, 107, 106, 106, 105, 104, 103, 102, 101, 100, 99, 98, 98, 98, 98, 98, 98, 97, 97, 96, 95, 94, 93, 92, 91, 90, 89, 89, 88, 88, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 90, 90, 90, 89, 89, 89, 88, 88, 88, 88, 88, 87, 87, 87, 87, 86, 86, 86, 86, 86, 85, 85
]

const CAROTID = [
    136, 136, 136, 136, 136, 136, 136, 135, 135, 135, 137, 140, 145, 151, 159, 168, 177, 188, 199, 212, 224, 236, 246, 252, 255, 255, 252, 248, 243, 237, 232, 227, 223, 221, 221, 222, 225, 228, 231, 234, 237, 240, 242, 244, 245, 245, 245, 244, 243, 242, 241, 240, 239, 238, 237, 237, 236, 236, 235, 234, 233, 230, 228, 227, 225, 225, 224, 224, 223, 223, 222, 222, 221, 219, 216, 212, 207, 203, 199, 197, 195, 194, 192, 192, 191, 192, 193, 195, 196, 196, 195, 194, 192, 192, 192, 191, 190, 188, 185, 182, 179, 179, 179, 178, 174, 167, 156, 144, 134, 130, 133, 145, 163, 182, 200, 212, 217, 217, 213, 207, 200, 193, 186, 179, 174, 171, 171, 172, 176, 179, 182, 183, 184, 185, 185, 185, 185, 184, 183, 181, 180, 179, 179, 179, 179, 179, 178, 178, 178, 177, 177, 176, 174, 173, 171, 170, 170, 170, 170, 170, 170, 169, 169, 169, 168, 168, 167, 165, 163, 161, 159, 158, 157, 157, 157, 157, 158, 159, 159, 159, 159, 158, 157, 155, 154, 152, 152, 151, 151, 152, 152, 153, 153, 154, 154, 154, 154, 153, 152, 152, 151, 151, 151, 150, 150, 150, 150, 150, 150, 150, 151, 150, 150, 150, 150, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 148, 148, 148, 148, 147, 147, 147, 146, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 144, 144, 143, 143, 143, 143, 143, 142, 142, 141, 141, 141, 140, 140, 140, 140, 139, 139, 139, 139, 139, 139, 138, 138, 138, 138, 137, 137, 137, 137, 137, 137, 136, 136, 136, 136, 136
]

const DESCENDING_AORTA = [
    71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 74, 76, 79, 83, 88, 94, 101, 110, 120, 130, 141, 152, 163, 172, 181, 189, 196, 202, 208, 212, 216, 220, 223, 227, 230, 232, 234, 236, 238, 240, 241, 242, 244, 245, 245, 246, 247, 247, 248, 249, 250, 251, 251, 252, 253, 254, 255, 255, 255, 255, 255, 254, 254, 254, 253, 252, 251, 250, 249, 247, 244, 241, 237, 232, 226, 220, 214, 208, 202, 196, 190, 183, 177, 171, 165, 159, 153, 147, 141, 136, 130, 125, 120, 116, 112, 107, 102, 97, 92, 88, 84, 80, 75, 69, 61, 52, 43, 35, 29, 25, 24, 26, 29, 32, 35, 36, 37, 37, 37, 36, 36, 36, 36, 36, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 51, 53, 54, 56, 57, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 76, 78, 80, 82, 84, 86, 87, 89, 89, 90, 90, 90, 90, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 91, 90, 90, 89, 88, 87, 87, 86, 86, 86, 85, 85, 85, 84, 84, 83, 83, 82, 82, 81, 80, 80, 79, 79, 78, 78, 77, 76, 76, 75, 74, 74, 73, 72, 71, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 71, 71
]

const FEMORAL = [
    75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 74, 78, 82, 88, 95, 104, 115, 129, 144, 159, 173, 186, 198, 208, 216, 224, 230, 235, 239, 244, 247, 250, 252, 254, 255, 255, 255, 254, 253, 252, 250, 247, 245, 242, 239, 236, 233, 230, 227, 224, 221, 218, 215, 211, 208, 204, 201, 197, 194, 191, 187, 184, 181, 177, 173, 170, 166, 162, 157, 152, 147, 142, 136, 131, 125, 120, 115, 109, 104, 99, 94, 89, 84, 79, 75, 71, 66, 62, 59, 55, 53, 50, 48, 46, 43, 41, 38, 36, 35, 33, 32, 30, 27, 23, 18, 13, 8, 3, 1, -0, 2, 7, 13, 20, 25, 29, 33, 35, 38, 40, 43, 45, 47, 50, 53, 57, 61, 64, 68, 70, 73, 75, 77, 80, 82, 83, 85, 86, 88, 89, 91, 93, 94, 95, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 102, 102, 103, 103, 103, 103, 102, 102, 102, 101, 100, 100, 99, 98, 97, 97, 96, 95, 94, 93, 92, 91, 90, 89, 87, 86, 84, 83, 81, 80, 79, 78, 77, 77, 76, 75, 74, 74, 73, 73, 72, 71, 71, 70, 70, 69, 69, 69, 68, 68, 68, 67, 67, 67, 66, 66, 66, 66, 66, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 68, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 72, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75
]

const ILIAC = [
    81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 79, 79, 79, 79, 79, 79, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 76, 77, 80, 83, 87, 93, 99, 108, 119, 131, 145, 158, 171, 183, 193, 203, 211, 218, 224, 229, 234, 239, 243, 246, 249, 251, 253, 254, 255, 255, 255, 254, 253, 252, 250, 248, 246, 244, 241, 239, 236, 233, 230, 227, 224, 221, 218, 214, 210, 207, 203, 200, 196, 193, 189, 185, 181, 177, 173, 169, 164, 159, 154, 148, 143, 138, 132, 127, 122, 116, 111, 106, 100, 96, 91, 86, 82, 77, 73, 69, 65, 62, 59, 56, 54, 51, 48, 46, 43, 41, 39, 38, 36, 34, 30, 26, 21, 16, 12, 8, 6, 6, 9, 13, 19, 24, 28, 32, 34, 37, 39, 42, 44, 46, 49, 52, 55, 59, 62, 66, 69, 72, 74, 77, 79, 82, 84, 86, 88, 89, 91, 93, 95, 97, 98, 100, 101, 102, 103, 104, 104, 105, 106, 106, 107, 108, 108, 109, 109, 109, 109, 109, 109, 109, 108, 108, 107, 107, 106, 105, 104, 104, 103, 102, 101, 100, 99, 98, 97, 96, 94, 93, 91, 90, 89, 87, 86, 85, 84, 83, 82, 82, 81, 80, 80, 79, 78, 77, 77, 76, 76, 75, 75, 74, 74, 73, 73, 73, 72, 72, 72, 71, 71, 71, 71, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81
]

const RADIAL = [
    133, 132, 132, 132, 132, 131, 131, 131, 131, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 129, 129, 129, 129, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 131, 134, 138, 142, 148, 154, 161, 170, 179, 189, 199, 207, 215, 221, 226, 231, 234, 237, 240, 242, 244, 246, 248, 250, 252, 253, 254, 254, 255, 255, 255, 255, 254, 253, 252, 250, 249, 248, 246, 245, 244, 242, 241, 240, 239, 238, 237, 236, 234, 232, 231, 229, 228, 226, 225, 224, 222, 221, 220, 219, 217, 215, 213, 210, 207, 205, 203, 201, 199, 198, 196, 193, 191, 189, 187, 185, 183, 180, 178, 176, 175, 173, 172, 171, 170, 168, 167, 165, 163, 162, 162, 161, 158, 155, 150, 144, 138, 134, 133, 135, 140, 146, 152, 157, 159, 161, 161, 161, 161, 161, 161, 160, 161, 161, 162, 164, 165, 166, 167, 168, 168, 168, 169, 169, 169, 169, 168, 168, 167, 166, 166, 165, 165, 165, 164, 164, 164, 164, 164, 163, 163, 162, 161, 161, 160, 160, 160, 160, 159, 158, 158, 157, 156, 155, 154, 154, 153, 153, 152, 152, 152, 152, 152, 151, 151, 150, 149, 148, 148, 147, 146, 145, 144, 144, 144, 143, 143, 143, 143, 143, 142, 142, 142, 142, 142, 142, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 139, 139, 139, 139, 139, 139, 138, 138, 138, 138, 137, 137, 137, 137, 136, 136, 136, 135, 135, 135, 134, 134, 134, 134, 133, 133, 133
]

const THORACIC_AORTA = [
    86, 86, 86, 86, 86, 86, 85, 85, 85, 85, 85, 85, 85, 85, 85, 84, 84, 84, 84, 85, 85, 87, 89, 92, 95, 99, 105, 111, 118, 126, 134, 142, 150, 157, 164, 170, 176, 181, 186, 190, 194, 198, 202, 207, 211, 215, 218, 222, 225, 229, 232, 235, 238, 240, 243, 245, 246, 248, 250, 251, 252, 253, 254, 254, 255, 255, 255, 254, 253, 252, 250, 248, 246, 243, 241, 239, 236, 233, 230, 227, 224, 220, 216, 211, 206, 201, 196, 191, 186, 181, 175, 170, 165, 159, 154, 149, 144, 139, 134, 128, 123, 119, 114, 110, 106, 101, 97, 92, 88, 84, 80, 77, 72, 68, 62, 55, 49, 43, 38, 35, 34, 35, 38, 40, 42, 43, 44, 44, 45, 45, 45, 45, 46, 46, 47, 48, 50, 52, 54, 56, 57, 59, 61, 63, 65, 67, 69, 71, 73, 74, 76, 78, 80, 83, 85, 87, 89, 91, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 109, 110, 111, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 113, 112, 112, 112, 111, 110, 110, 109, 108, 107, 106, 105, 105, 104, 103, 103, 102, 101, 100, 100, 99, 98, 97, 96, 95, 94, 94, 93, 92, 91, 90, 90, 89, 88, 88, 87, 86, 86, 85, 84, 84, 83, 83, 83, 82, 82, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 82, 82, 82, 82, 83, 83, 83, 83, 84, 84, 84, 84, 85, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 86, 86, 86
]

const halfSineWave = [
    0, 32, 64, 95, 125, 152, 177, 199, 218, 233, 244, 251, 254, 253, 248, 239,
    226, 209, 188, 165, 139, 110, 80, 48, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

const fullSineWave = [
    0, 32, 64, 95, 125, 152, 177, 199, 218, 233, 244, 251, 254, 253, 248, 239,
    226, 209, 188, 165, 139, 110, 80, 48, 16, 16, 48, 80, 110, 139, 165, 188,
    209, 226, 239, 248, 253, 254, 251, 244, 233, 218, 199, 177, 152, 125, 95,
    64, 32, 0,
];

const maxFlowRate = 40;
const minFLowRate = -10;

let pumpType = 1;
let flowData = [...halfSineWave];
let flowPeriod = 2000;
let connected = false;

const mapToTimePoints = (x) => {
    return (x / 300) * flowPeriod;
}

const mapToActualFlowRate = (x) => {
    return (x * (maxFlowRate - minFLowRate) / 255.0) + minFLowRate;
}

var plotData = [
    {
        x: [...Array(ANTERIOR_TIBIAL.length).keys()].map(mapToTimePoints),
        y: FEMORAL.map(mapToActualFlowRate),
        fill: "tozeroy",
        fillpattern: { shape: "/" },
        name: "Target Flow-Rate",
        mode: "lines",
        line: {
            color: "#D0BCFF",
        },
    },
    {
        x: [],
        y: [],
        fill: "tozeroy",
        fillpattern: { shape: "/" },
        name: "Actual Flow-Rate",
        mode: "lines",
        line: {
            color: "#EFB8C8",
        },
    },
];

const plotConfig = { responsive: false, staticPlot: true };

const plotLayout = {
    paper_bgcolor: "#00000000",
    plot_bgcolor: "#00000000",
    showlegend: true,
    legend: { x: 1, xanchor: "right", y: 1 },
    xaxis: {
        visible: true,
        showgrid: false,
        zeroline: false,
        title: "Time Step (ms)",
    },
    yaxis: {
        visible: true,
        showgrid: false,
        zeroline: false,
        title: "Flow Rate (mL/min)",
        range: [minFLowRate - 10, maxFlowRate + 10],
    },
    margin: {
        l: 50,
        r: 0,
        b: 40,
        t: 30,
        pad: 0,
    },
    title: "Flow Profile",
    font: {
        family: "Sans-Serif",
        size: 14,
        color: "#7f7f7f",
    },
};

const updateTargetFlowPlotData = (x, y) => {
    plotData[0]["x"] = [...Array(x.length).keys()].map(mapToTimePoints);
    plotData[0]["y"] = [...y].map(mapToActualFlowRate);
    Plotly.update(ctx, plotData, plotLayout, plotConfig);
}

flowPicker.addEventListener("change", (e) => {
    const selectedFile = e.target.files?.[0];
    if (!selectedFile) return;
    const reader = new FileReader();
    reader.onload = function (event) {
        const fileContent = event.target.result;
        flowData = fileContent.split(",").map(Number);
        plotData[0]["x"] = [...Array(flowData.length).keys()].map(mapToTimePoints);
        plotData[0]["y"] = [...flowData].map(mapToActualFlowRate);
        Plotly.update(ctx, plotData, plotLayout, plotConfig);
    };
    reader.readAsText(selectedFile);
});

Plotly.newPlot(ctx, plotData, plotLayout, plotConfig);

sendButton.addEventListener("click", () => {
    if (flowPeriodInput.value != "") {
        const value = parseInt(flowPeriodInput.value);
        if (value < 0 || value > 5000) {
            alert("Invalid Period");
            return;
        }
        flowPeriod = value;
    }
    let configuration = `${pumpType},${flowPeriod}|`;
    const serialData = "<" + configuration + flowData.join(",") + ">";
    window.api.writeToSerial(serialData);
    console.warn(serialData);
});

connectButton.addEventListener("click", async () => {
    if (connected) {
        await window.api.disconnect();
        connectButton.innerText = "Connect";
        connectionStatus.innerText = "Device Disconnected";
        connected = false;
    } else {
        connected = await window.api.connect();
        if (connected) {
            connectButton.innerText = "Disconnect";
            connectionStatus.innerText = "Device Connected";
        } else alert("Connection Failed");
    }
    connectionSwitch.checked = connected;
});

window.api.onSerialRead((_, data) => {
    const flowRate = data.split(",").map((str) => parseInt(str, 10));
    plotData[1]["x"] = [...Array(flowRate.length).keys()].map(mapToTimePoints);
    plotData[1]["y"] = [...flowRate].map(mapToActualFlowRate);
    Plotly.update(ctx, plotData, plotLayout, plotConfig);
});

// ... Pump Type Selector
const pumpSelector = document.getElementById("pump-selector");
pumpSelector.querySelector("ul").addEventListener("click", (e) => {
    const summary = pumpSelector.querySelector("summary");
    const selectedItem = e.target.textContent;
    summary.innerText = selectedItem;
    if (selectedItem.toLowerCase() === "syringe") pumpType = 1;
    else pumpType = 2;
    pumpSelector.removeAttribute("open");
});

// ... Flow Profile Selector
const flowProfileSelector = document.getElementById("flow-profile-selector");
flowProfileSelector.querySelector("ul").addEventListener("click", (e) => {
    const summary = flowProfileSelector.querySelector("summary");
    const selectedItem = e.target.textContent;
    summary.innerText = selectedItem;
    const flowProfile = selectedItem.toLowerCase();
    flowProfileSelector.removeAttribute("open");
    if (flowProfile === "custom") flowPicker.style.display = "block";
    else {
        if (flowProfile === "half sine wave") {
            flowData = [...halfSineWave];
            plotData[0]["x"] = [...Array(nFLowPoints).keys()].map(mapToTimePoints);
            plotData[0]["y"] = [...halfSineWave].map(mapToActualFlowRate);
            Plotly.update(ctx, plotData, plotLayout, plotConfig);
        } else if (flowProfile === "full sine wave") {
            flowData = [...fullSineWave];
            plotData[0]["x"] = [...Array(fullSineWave.length).keys()].map(mapToTimePoints);
            plotData[0]["y"] = [...fullSineWave].map(mapToActualFlowRate);
            Plotly.update(ctx, plotData, plotLayout, plotConfig);
        }
        flowPicker.style.display = "none";
    }
});




